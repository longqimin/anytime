
//line ragel/parse_datetime.go.rl:1
// GENERETED .hpp BY ragel AS:
//   ragel-go -G2 -e -o ragel_parse_datetime.go ragel_parse_datetime.go.rl
// it might be helpful to generate the FSM graph in debug:
//   ragel -Vp ragel_parse_datetime.go.rl -o ragel_parse_datetime.dot
//   dot ragel_parse_datetime.dot -Tpng -o ragel_parse_datetime.png

package ragel

import (
    "time"
    "fmt"
    "strconv"
    "errors"
)


//line ragel/parse_datetime.go:20
var _datetime_parser_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 1, 6, 1, 7, 
	1, 8, 1, 9, 1, 10, 1, 11, 
	1, 12, 1, 13, 1, 14, 1, 15, 
	1, 16, 1, 17, 1, 18, 1, 19, 
	1, 20, 1, 21, 1, 22, 1, 23, 
	1, 24, 1, 25, 1, 26, 1, 27, 
	1, 28, 1, 30, 2, 3, 1, 2, 
	4, 1, 2, 5, 1, 2, 5, 21, 
	2, 6, 1, 2, 8, 1, 2, 9, 
	1, 2, 10, 1, 2, 11, 1, 2, 
	12, 1, 2, 13, 1, 2, 14, 1, 
	2, 15, 1, 2, 16, 1, 2, 17, 
	1, 2, 18, 1, 2, 19, 1, 2, 
	20, 1, 2, 21, 1, 2, 22, 1, 
	2, 23, 1, 2, 24, 1, 2, 25, 
	1, 2, 26, 1, 2, 27, 1, 2, 
	28, 1, 2, 29, 1, 2, 31, 2, 
	2, 32, 2, 2, 33, 2, 3, 5, 
	21, 1, 
}

var _datetime_parser_key_offsets []int16 = []int16{
	0, 0, 2, 4, 6, 8, 23, 35, 
	38, 40, 47, 49, 50, 51, 56, 61, 
	67, 73, 81, 88, 95, 102, 109, 111, 
	113, 115, 119, 123, 125, 127, 131, 137, 
	139, 145, 149, 151, 152, 155, 156, 158, 
	159, 161, 162, 163, 165, 166, 167, 170, 
	171, 172, 173, 174, 176, 178, 179, 182, 
	183, 184, 185, 187, 189, 191, 193, 194, 
	196, 199, 200, 202, 204, 205, 206, 208, 
	209, 210, 212, 213, 214, 216, 218, 220, 
	223, 229, 235, 241, 247, 251, 257, 260, 
	262, 264, 265, 270, 272, 274, 275, 279, 
	280, 284, 285, 286, 290, 291, 292, 297, 
	298, 299, 300, 301, 305, 307, 308, 313, 
	314, 315, 316, 320, 322, 326, 330, 331, 
	333, 338, 339, 343, 347, 348, 349, 353, 
	354, 355, 359, 360, 361, 365, 376, 393, 
	408, 408, 408, 412, 416, 419, 424, 427, 
	428, 434, 441, 447, 456, 468, 474, 481, 
	498, 511, 523, 535, 547, 559, 571, 583, 
	595, 607, 617, 628, 645, 660, 677, 693, 
	709, 725, 741, 757, 773, 789, 805, 819, 
	834, 849, 864, 883, 900, 915, 922, 933, 
	946, 959, 972, 985, 998, 1011, 1024, 1035, 
}

var _datetime_parser_trans_keys []byte = []byte{
	48, 57, 48, 57, 48, 57, 48, 57, 
	46, 48, 49, 65, 68, 70, 74, 77, 
	78, 79, 83, 45, 47, 50, 57, 48, 
	49, 65, 68, 70, 74, 77, 78, 79, 
	83, 50, 57, 48, 49, 57, 48, 57, 
	50, 65, 66, 48, 49, 51, 57, 65, 
	66, 68, 67, 50, 48, 49, 51, 57, 
	50, 48, 49, 51, 57, 47, 95, 65, 
	90, 97, 122, 47, 95, 65, 90, 97, 
	122, 47, 68, 77, 95, 65, 90, 97, 
	122, 47, 68, 95, 65, 90, 97, 122, 
	47, 67, 95, 65, 90, 97, 122, 47, 
	77, 95, 65, 90, 97, 122, 47, 95, 
	109, 65, 90, 97, 122, 48, 57, 48, 
	57, 48, 57, 48, 53, 54, 57, 48, 
	53, 54, 57, 48, 57, 48, 57, 45, 
	47, 48, 57, 48, 51, 49, 50, 52, 
	57, 49, 57, 45, 47, 48, 50, 51, 
	57, 45, 47, 48, 57, 112, 117, 114, 
	45, 47, 105, 108, 45, 47, 103, 45, 
	47, 101, 99, 45, 47, 101, 98, 45, 
	47, 114, 117, 97, 114, 121, 45, 47, 
	97, 117, 110, 45, 47, 117, 97, 114, 
	121, 45, 47, 108, 110, 45, 47, 45, 
	47, 97, 114, 121, 45, 47, 99, 104, 
	45, 47, 45, 47, 111, 118, 45, 47, 
	99, 116, 45, 47, 101, 112, 45, 47, 
	48, 57, 48, 57, 48, 49, 57, 48, 
	51, 49, 50, 52, 57, 48, 51, 49, 
	50, 52, 57, 48, 51, 49, 50, 52, 
	57, 48, 51, 49, 50, 52, 57, 48, 
	49, 50, 57, 48, 51, 49, 50, 52, 
	57, 48, 49, 57, 48, 57, 112, 117, 
	114, 48, 51, 105, 49, 50, 48, 57, 
	48, 49, 108, 48, 51, 49, 50, 103, 
	48, 51, 49, 50, 101, 99, 48, 51, 
	49, 50, 101, 98, 48, 51, 114, 49, 
	50, 117, 97, 114, 121, 48, 51, 49, 
	50, 97, 117, 110, 48, 51, 117, 49, 
	50, 97, 114, 121, 48, 51, 49, 50, 
	108, 110, 48, 51, 49, 50, 48, 51, 
	49, 50, 97, 114, 121, 48, 51, 99, 
	49, 50, 104, 48, 51, 49, 50, 48, 
	51, 49, 50, 111, 118, 48, 51, 49, 
	50, 99, 116, 48, 51, 49, 50, 101, 
	112, 48, 51, 49, 50, 32, 43, 45, 
	47, 84, 90, 95, 65, 89, 97, 122, 
	32, 43, 45, 47, 58, 65, 80, 90, 
	95, 97, 112, 48, 57, 66, 89, 98, 
	122, 32, 43, 45, 47, 65, 66, 80, 
	90, 95, 97, 112, 67, 89, 98, 122, 
	32, 58, 48, 57, 32, 58, 48, 57, 
	32, 48, 57, 32, 48, 53, 54, 57, 
	32, 48, 57, 32, 32, 58, 48, 51, 
	52, 57, 32, 47, 95, 65, 90, 97, 
	122, 47, 95, 65, 90, 97, 122, 32, 
	43, 45, 47, 95, 65, 90, 97, 122, 
	32, 43, 45, 47, 65, 66, 90, 95, 
	67, 89, 97, 122, 47, 95, 65, 90, 
	97, 122, 32, 47, 95, 65, 90, 97, 
	122, 32, 43, 45, 47, 58, 65, 80, 
	90, 95, 97, 112, 48, 57, 66, 89, 
	98, 122, 32, 43, 45, 46, 47, 90, 
	95, 48, 57, 65, 89, 97, 122, 32, 
	43, 45, 47, 90, 95, 48, 57, 65, 
	89, 97, 122, 32, 43, 45, 47, 90, 
	95, 48, 57, 65, 89, 97, 122, 32, 
	43, 45, 47, 90, 95, 48, 57, 65, 
	89, 97, 122, 32, 43, 45, 47, 90, 
	95, 48, 57, 65, 89, 97, 122, 32, 
	43, 45, 47, 90, 95, 48, 57, 65, 
	89, 97, 122, 32, 43, 45, 47, 90, 
	95, 48, 57, 65, 89, 97, 122, 32, 
	43, 45, 47, 90, 95, 48, 57, 65, 
	89, 97, 122, 32, 43, 45, 47, 90, 
	95, 48, 57, 65, 89, 97, 122, 32, 
	43, 45, 47, 90, 95, 65, 89, 97, 
	122, 32, 43, 45, 46, 47, 90, 95, 
	65, 89, 97, 122, 32, 43, 45, 47, 
	58, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 58, 65, 80, 90, 95, 97, 112, 
	66, 89, 98, 122, 32, 43, 45, 46, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 66, 
	89, 98, 122, 32, 43, 45, 46, 47, 
	65, 80, 90, 95, 97, 112, 66, 89, 
	98, 122, 32, 43, 45, 46, 47, 65, 
	80, 90, 95, 97, 112, 66, 89, 98, 
	122, 32, 43, 45, 47, 58, 65, 80, 
	90, 95, 97, 112, 66, 89, 98, 122, 
	32, 43, 45, 47, 58, 65, 80, 90, 
	95, 97, 112, 48, 51, 52, 57, 66, 
	89, 98, 122, 32, 43, 45, 47, 58, 
	65, 80, 90, 95, 97, 112, 48, 57, 
	66, 89, 98, 122, 32, 43, 45, 47, 
	50, 90, 95, 48, 49, 51, 57, 65, 
	89, 97, 122, 32, 47, 95, 65, 90, 
	97, 122, 32, 43, 45, 47, 84, 90, 
	95, 65, 89, 97, 122, 32, 43, 45, 
	47, 84, 90, 95, 48, 57, 65, 89, 
	97, 122, 32, 43, 45, 47, 84, 90, 
	95, 48, 49, 65, 89, 97, 122, 32, 
	43, 45, 47, 84, 90, 95, 49, 57, 
	65, 89, 97, 122, 32, 43, 45, 47, 
	84, 90, 95, 48, 57, 65, 89, 97, 
	122, 32, 43, 45, 47, 84, 90, 95, 
	48, 49, 65, 89, 97, 122, 32, 43, 
	45, 47, 84, 90, 95, 48, 57, 65, 
	89, 97, 122, 32, 43, 45, 47, 84, 
	90, 95, 48, 49, 65, 89, 97, 122, 
	32, 43, 45, 47, 84, 90, 95, 65, 
	89, 97, 122, 32, 43, 45, 47, 84, 
	90, 95, 49, 57, 65, 89, 97, 122, 
	
}

var _datetime_parser_single_lengths []byte = []byte{
	0, 0, 0, 0, 0, 11, 10, 1, 
	0, 3, 2, 1, 1, 1, 1, 2, 
	2, 4, 3, 3, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 0, 
	2, 2, 2, 1, 3, 1, 2, 1, 
	2, 1, 1, 2, 1, 1, 3, 1, 
	1, 1, 1, 2, 2, 1, 3, 1, 
	1, 1, 2, 2, 2, 2, 1, 2, 
	3, 1, 2, 2, 1, 1, 2, 1, 
	1, 2, 1, 1, 2, 0, 0, 1, 
	2, 2, 2, 2, 0, 2, 1, 0, 
	2, 1, 3, 0, 0, 1, 2, 1, 
	2, 1, 1, 2, 1, 1, 3, 1, 
	1, 1, 1, 2, 2, 1, 3, 1, 
	1, 1, 2, 2, 2, 2, 1, 2, 
	3, 1, 2, 2, 1, 1, 2, 1, 
	1, 2, 1, 1, 2, 7, 11, 11, 
	0, 0, 2, 2, 1, 1, 1, 1, 
	2, 3, 2, 5, 8, 2, 3, 11, 
	7, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 7, 11, 11, 11, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 11, 
	11, 11, 11, 11, 7, 3, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
}

var _datetime_parser_range_lengths []byte = []byte{
	0, 1, 1, 1, 1, 2, 1, 1, 
	1, 2, 0, 0, 0, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 2, 2, 1, 1, 1, 2, 1, 
	2, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 0, 1, 1, 1, 0, 1, 0, 
	1, 0, 0, 1, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 1, 0, 
	0, 0, 1, 0, 1, 1, 0, 0, 
	1, 0, 1, 1, 0, 0, 1, 0, 
	0, 1, 0, 0, 1, 2, 3, 2, 
	0, 0, 1, 1, 1, 2, 1, 0, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 2, 2, 3, 2, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 2, 2, 
	2, 2, 4, 3, 4, 2, 2, 3, 
	3, 3, 3, 3, 3, 3, 2, 3, 
}

var _datetime_parser_index_offsets []int16 = []int16{
	0, 0, 2, 4, 6, 8, 22, 34, 
	37, 39, 45, 48, 50, 52, 56, 60, 
	65, 70, 77, 83, 89, 95, 101, 103, 
	105, 107, 110, 113, 115, 117, 121, 126, 
	128, 133, 137, 140, 142, 146, 148, 151, 
	153, 156, 158, 160, 163, 165, 167, 171, 
	173, 175, 177, 179, 182, 185, 187, 191, 
	193, 195, 197, 200, 203, 206, 209, 211, 
	214, 218, 220, 223, 226, 228, 230, 233, 
	235, 237, 240, 242, 244, 247, 249, 251, 
	254, 259, 264, 269, 274, 277, 282, 285, 
	287, 290, 292, 297, 299, 301, 303, 307, 
	309, 313, 315, 317, 321, 323, 325, 330, 
	332, 334, 336, 338, 342, 345, 347, 352, 
	354, 356, 358, 362, 365, 369, 373, 375, 
	378, 383, 385, 389, 393, 395, 397, 401, 
	403, 405, 409, 411, 413, 417, 427, 442, 
	456, 457, 458, 462, 466, 469, 473, 476, 
	478, 483, 489, 494, 502, 513, 518, 524, 
	539, 550, 560, 570, 580, 590, 600, 610, 
	620, 630, 639, 649, 664, 678, 693, 707, 
	721, 735, 749, 763, 777, 791, 805, 818, 
	832, 846, 860, 876, 891, 903, 909, 919, 
	930, 941, 952, 963, 974, 985, 996, 1006, 
}

var _datetime_parser_trans_targs []byte = []byte{
	2, 0, 3, 0, 4, 0, 5, 0, 
	77, 79, 81, 88, 97, 100, 108, 118, 
	124, 127, 130, 6, 85, 0, 7, 32, 
	34, 41, 44, 52, 62, 68, 71, 74, 
	33, 0, 8, 29, 0, 133, 0, 178, 
	11, 12, 134, 179, 0, 11, 12, 0, 
	136, 0, 137, 0, 144, 138, 139, 0, 
	144, 138, 139, 0, 16, 16, 16, 16, 
	0, 145, 145, 145, 145, 0, 16, 146, 
	147, 16, 16, 16, 0, 16, 146, 16, 
	16, 16, 0, 16, 149, 16, 16, 16, 
	0, 16, 147, 16, 16, 16, 0, 16, 
	16, 147, 16, 16, 0, 152, 0, 153, 
	0, 162, 0, 163, 177, 0, 165, 176, 
	0, 166, 0, 22, 0, 30, 30, 133, 
	0, 31, 184, 183, 182, 0, 182, 0, 
	30, 30, 29, 8, 0, 30, 30, 8, 
	0, 35, 39, 0, 36, 0, 30, 30, 
	37, 0, 38, 0, 30, 30, 0, 40, 
	0, 30, 30, 0, 42, 0, 43, 0, 
	30, 30, 0, 45, 0, 46, 0, 30, 
	30, 47, 0, 48, 0, 49, 0, 50, 
	0, 51, 0, 30, 30, 0, 53, 59, 
	0, 54, 0, 30, 30, 55, 0, 56, 
	0, 57, 0, 58, 0, 30, 30, 0, 
	60, 61, 0, 30, 30, 0, 30, 30, 
	0, 63, 0, 64, 67, 0, 30, 30, 
	65, 0, 66, 0, 30, 30, 0, 30, 
	30, 0, 69, 0, 70, 0, 30, 30, 
	0, 72, 0, 73, 0, 30, 30, 0, 
	75, 0, 76, 0, 30, 30, 0, 78, 
	0, 8, 0, 8, 80, 0, 185, 187, 
	186, 133, 0, 82, 84, 83, 8, 0, 
	185, 189, 188, 190, 0, 191, 189, 188, 
	190, 0, 190, 133, 0, 86, 84, 87, 
	8, 0, 133, 190, 0, 190, 0, 89, 
	95, 0, 90, 0, 31, 92, 93, 91, 
	0, 182, 0, 182, 0, 94, 0, 31, 
	92, 91, 0, 96, 0, 31, 92, 91, 
	0, 98, 0, 99, 0, 31, 92, 91, 
	0, 101, 0, 102, 0, 31, 92, 103, 
	91, 0, 104, 0, 105, 0, 106, 0, 
	107, 0, 31, 92, 91, 0, 109, 115, 
	0, 110, 0, 31, 92, 111, 91, 0, 
	112, 0, 113, 0, 114, 0, 31, 92, 
	91, 0, 116, 117, 0, 31, 92, 91, 
	0, 31, 92, 91, 0, 119, 0, 120, 
	123, 0, 31, 92, 121, 91, 0, 122, 
	0, 31, 92, 91, 0, 31, 92, 91, 
	0, 125, 0, 126, 0, 31, 92, 91, 
	0, 128, 0, 129, 0, 31, 92, 91, 
	0, 131, 0, 132, 0, 31, 92, 91, 
	0, 9, 13, 14, 15, 180, 150, 15, 
	15, 15, 0, 135, 13, 14, 15, 25, 
	20, 20, 150, 15, 21, 21, 151, 15, 
	15, 0, 10, 13, 14, 15, 17, 19, 
	20, 150, 15, 21, 21, 15, 15, 0, 
	0, 0, 10, 141, 139, 0, 10, 141, 
	140, 0, 10, 140, 0, 10, 142, 143, 
	0, 10, 143, 0, 10, 0, 10, 141, 
	139, 140, 0, 10, 145, 145, 145, 145, 
	0, 145, 145, 145, 145, 0, 148, 13, 
	14, 145, 145, 145, 145, 0, 10, 13, 
	14, 15, 18, 19, 150, 15, 15, 15, 
	0, 145, 145, 145, 145, 0, 10, 16, 
	16, 16, 16, 0, 135, 13, 14, 15, 
	25, 20, 20, 150, 15, 21, 21, 22, 
	15, 15, 0, 148, 13, 14, 23, 15, 
	150, 15, 24, 15, 15, 0, 148, 13, 
	14, 15, 150, 15, 154, 15, 15, 0, 
	148, 13, 14, 15, 150, 15, 155, 15, 
	15, 0, 148, 13, 14, 15, 150, 15, 
	156, 15, 15, 0, 148, 13, 14, 15, 
	150, 15, 157, 15, 15, 0, 148, 13, 
	14, 15, 150, 15, 158, 15, 15, 0, 
	148, 13, 14, 15, 150, 15, 159, 15, 
	15, 0, 148, 13, 14, 15, 150, 15, 
	160, 15, 15, 0, 148, 13, 14, 15, 
	150, 15, 161, 15, 15, 0, 148, 13, 
	14, 15, 150, 15, 15, 15, 0, 148, 
	13, 14, 23, 15, 150, 15, 15, 15, 
	0, 135, 13, 14, 15, 26, 20, 20, 
	150, 15, 21, 21, 164, 15, 15, 0, 
	135, 13, 14, 15, 26, 20, 20, 150, 
	15, 21, 21, 15, 15, 0, 135, 13, 
	14, 27, 15, 20, 20, 150, 15, 21, 
	21, 175, 15, 15, 0, 135, 13, 14, 
	15, 20, 20, 150, 15, 21, 21, 167, 
	15, 15, 0, 135, 13, 14, 15, 20, 
	20, 150, 15, 21, 21, 168, 15, 15, 
	0, 135, 13, 14, 15, 20, 20, 150, 
	15, 21, 21, 169, 15, 15, 0, 135, 
	13, 14, 15, 20, 20, 150, 15, 21, 
	21, 170, 15, 15, 0, 135, 13, 14, 
	15, 20, 20, 150, 15, 21, 21, 171, 
	15, 15, 0, 135, 13, 14, 15, 20, 
	20, 150, 15, 21, 21, 172, 15, 15, 
	0, 135, 13, 14, 15, 20, 20, 150, 
	15, 21, 21, 173, 15, 15, 0, 135, 
	13, 14, 15, 20, 20, 150, 15, 21, 
	21, 174, 15, 15, 0, 135, 13, 14, 
	15, 20, 20, 150, 15, 21, 21, 15, 
	15, 0, 135, 13, 14, 27, 15, 20, 
	20, 150, 15, 21, 21, 15, 15, 0, 
	135, 13, 14, 27, 15, 20, 20, 150, 
	15, 21, 21, 15, 15, 0, 135, 13, 
	14, 15, 26, 20, 20, 150, 15, 21, 
	21, 15, 15, 0, 135, 13, 14, 15, 
	25, 20, 20, 150, 15, 21, 21, 151, 
	28, 15, 15, 0, 135, 13, 14, 15, 
	25, 20, 20, 150, 15, 21, 21, 28, 
	15, 15, 0, 10, 13, 14, 16, 178, 
	181, 16, 134, 179, 16, 16, 0, 10, 
	145, 145, 145, 145, 0, 9, 13, 14, 
	15, 180, 150, 15, 15, 15, 0, 9, 
	13, 14, 15, 180, 150, 15, 182, 15, 
	15, 0, 9, 13, 14, 15, 180, 150, 
	15, 182, 15, 15, 0, 9, 13, 14, 
	15, 180, 150, 15, 182, 15, 15, 0, 
	9, 13, 14, 15, 180, 150, 15, 182, 
	15, 15, 0, 9, 13, 14, 15, 180, 
	150, 15, 182, 15, 15, 0, 9, 13, 
	14, 15, 180, 150, 15, 182, 15, 15, 
	0, 9, 13, 14, 15, 180, 150, 15, 
	182, 15, 15, 0, 9, 13, 14, 15, 
	180, 150, 15, 15, 15, 0, 9, 13, 
	14, 15, 180, 150, 15, 182, 15, 15, 
	0, 
}

var _datetime_parser_trans_actions []byte = []byte{
	3, 1, 0, 1, 0, 1, 0, 1, 
	9, 64, 64, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 64, 1, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 1, 0, 0, 1, 0, 1, 3, 
	0, 0, 3, 3, 1, 0, 0, 1, 
	0, 1, 0, 1, 3, 3, 3, 1, 
	139, 139, 139, 1, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 1, 0, 1, 3, 
	1, 0, 1, 3, 3, 1, 3, 3, 
	1, 3, 1, 0, 1, 7, 7, 0, 
	1, 3, 3, 3, 3, 1, 0, 1, 
	7, 7, 0, 0, 1, 7, 7, 0, 
	1, 0, 0, 1, 0, 1, 25, 25, 
	0, 1, 0, 1, 25, 25, 1, 0, 
	1, 33, 33, 1, 0, 1, 0, 1, 
	41, 41, 1, 0, 1, 0, 1, 21, 
	21, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 21, 21, 1, 0, 0, 
	1, 0, 1, 19, 19, 0, 1, 0, 
	1, 0, 1, 0, 1, 19, 19, 1, 
	0, 0, 1, 31, 31, 1, 29, 29, 
	1, 0, 1, 0, 0, 1, 23, 23, 
	0, 1, 0, 1, 23, 23, 1, 27, 
	27, 1, 0, 1, 0, 1, 39, 39, 
	1, 0, 1, 0, 1, 37, 37, 1, 
	0, 1, 0, 1, 35, 35, 1, 3, 
	1, 0, 1, 0, 0, 1, 61, 61, 
	61, 0, 1, 61, 61, 61, 0, 1, 
	61, 61, 61, 0, 1, 61, 61, 61, 
	0, 1, 0, 0, 1, 61, 61, 61, 
	0, 1, 0, 0, 1, 0, 1, 0, 
	0, 1, 0, 1, 88, 88, 0, 88, 
	1, 0, 1, 0, 1, 0, 1, 88, 
	88, 88, 1, 0, 1, 100, 100, 100, 
	1, 0, 1, 0, 1, 112, 112, 112, 
	1, 0, 1, 0, 1, 82, 82, 0, 
	82, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 82, 82, 82, 1, 0, 0, 
	1, 0, 1, 79, 79, 0, 79, 1, 
	0, 1, 0, 1, 0, 1, 79, 79, 
	79, 1, 0, 0, 1, 97, 97, 97, 
	1, 94, 94, 94, 1, 0, 1, 0, 
	0, 1, 85, 85, 0, 85, 1, 0, 
	1, 85, 85, 85, 1, 91, 91, 91, 
	1, 0, 1, 0, 1, 109, 109, 109, 
	1, 0, 1, 0, 1, 106, 106, 106, 
	1, 0, 1, 0, 1, 103, 103, 103, 
	1, 11, 11, 11, 67, 67, 67, 67, 
	67, 67, 0, 47, 47, 47, 121, 47, 
	121, 121, 121, 121, 121, 121, 0, 121, 
	121, 0, 0, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	0, 0, 145, 59, 0, 0, 145, 59, 
	0, 0, 145, 0, 0, 5, 3, 3, 
	0, 142, 0, 0, 142, 0, 145, 59, 
	0, 0, 0, 148, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 17, 
	17, 76, 76, 76, 76, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 45, 45, 45, 118, 
	45, 118, 118, 118, 118, 118, 118, 0, 
	118, 118, 0, 13, 13, 13, 13, 73, 
	73, 73, 0, 73, 73, 0, 57, 57, 
	57, 136, 136, 136, 0, 136, 136, 0, 
	57, 57, 57, 136, 136, 136, 0, 136, 
	136, 0, 57, 57, 57, 136, 136, 136, 
	0, 136, 136, 0, 57, 57, 57, 136, 
	136, 136, 0, 136, 136, 0, 57, 57, 
	57, 136, 136, 136, 0, 136, 136, 0, 
	57, 57, 57, 136, 136, 136, 0, 136, 
	136, 0, 57, 57, 57, 136, 136, 136, 
	0, 136, 136, 0, 57, 57, 57, 136, 
	136, 136, 0, 136, 136, 0, 57, 57, 
	57, 136, 136, 136, 136, 136, 0, 13, 
	13, 13, 13, 73, 73, 73, 73, 73, 
	0, 51, 51, 51, 127, 51, 127, 127, 
	127, 127, 127, 127, 0, 127, 127, 0, 
	49, 49, 49, 124, 49, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 55, 55, 
	55, 55, 133, 133, 133, 133, 133, 133, 
	133, 0, 133, 133, 0, 57, 57, 57, 
	136, 136, 136, 136, 136, 136, 136, 0, 
	136, 136, 0, 57, 57, 57, 136, 136, 
	136, 136, 136, 136, 136, 0, 136, 136, 
	0, 57, 57, 57, 136, 136, 136, 136, 
	136, 136, 136, 0, 136, 136, 0, 57, 
	57, 57, 136, 136, 136, 136, 136, 136, 
	136, 0, 136, 136, 0, 57, 57, 57, 
	136, 136, 136, 136, 136, 136, 136, 0, 
	136, 136, 0, 57, 57, 57, 136, 136, 
	136, 136, 136, 136, 136, 0, 136, 136, 
	0, 57, 57, 57, 136, 136, 136, 136, 
	136, 136, 136, 0, 136, 136, 0, 57, 
	57, 57, 136, 136, 136, 136, 136, 136, 
	136, 0, 136, 136, 0, 57, 57, 57, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 0, 53, 53, 53, 53, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 0, 
	55, 55, 55, 55, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 0, 51, 51, 
	51, 127, 51, 127, 127, 127, 127, 127, 
	127, 127, 127, 0, 47, 47, 47, 121, 
	47, 121, 121, 121, 121, 121, 121, 0, 
	0, 121, 121, 0, 47, 47, 47, 121, 
	47, 121, 121, 121, 121, 121, 121, 0, 
	121, 121, 0, 0, 0, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 0, 5, 
	0, 0, 0, 0, 0, 43, 43, 43, 
	115, 115, 115, 115, 115, 115, 0, 43, 
	43, 43, 115, 115, 115, 115, 0, 115, 
	115, 0, 43, 43, 43, 115, 115, 115, 
	115, 0, 115, 115, 0, 11, 11, 11, 
	67, 67, 67, 67, 0, 67, 67, 0, 
	11, 11, 11, 67, 67, 67, 67, 0, 
	67, 67, 0, 11, 11, 11, 67, 67, 
	67, 67, 0, 67, 67, 0, 70, 70, 
	70, 151, 151, 151, 151, 0, 151, 151, 
	0, 70, 70, 70, 151, 151, 151, 151, 
	0, 151, 151, 0, 70, 70, 70, 151, 
	151, 151, 151, 151, 151, 0, 70, 70, 
	70, 151, 151, 151, 151, 0, 151, 151, 
	0, 
}

var _datetime_parser_eof_actions []byte = []byte{
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 11, 47, 0, 
	0, 15, 145, 145, 145, 5, 142, 142, 
	145, 148, 0, 17, 0, 15, 5, 45, 
	13, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 13, 51, 49, 55, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 53, 
	55, 51, 47, 47, 0, 5, 43, 43, 
	43, 11, 11, 11, 70, 70, 70, 70, 
}

const datetime_parser_start int = 1
const datetime_parser_first_final int = 133
const datetime_parser_error int = 0

const datetime_parser_en_main int = 1


//line ragel/parse_datetime.go.rl:24



//line ragel/parse_datetime.go:587
var _actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 1, 6, 1, 7, 
	1, 8, 1, 9, 1, 10, 1, 11, 
	1, 12, 1, 13, 1, 14, 1, 15, 
	1, 16, 1, 17, 1, 18, 1, 19, 
	1, 20, 1, 21, 1, 22, 1, 23, 
	1, 24, 1, 25, 1, 26, 1, 27, 
	1, 28, 1, 30, 2, 3, 1, 2, 
	4, 1, 2, 5, 1, 2, 5, 21, 
	2, 6, 1, 2, 8, 1, 2, 9, 
	1, 2, 10, 1, 2, 11, 1, 2, 
	12, 1, 2, 13, 1, 2, 14, 1, 
	2, 15, 1, 2, 16, 1, 2, 17, 
	1, 2, 18, 1, 2, 19, 1, 2, 
	20, 1, 2, 21, 1, 2, 22, 1, 
	2, 23, 1, 2, 24, 1, 2, 25, 
	1, 2, 26, 1, 2, 27, 1, 2, 
	28, 1, 2, 29, 1, 2, 31, 2, 
	2, 32, 2, 2, 33, 2, 3, 5, 
	21, 1, 
}

var _key_offsets []int16 = []int16{
	0, 0, 2, 4, 6, 8, 23, 35, 
	38, 40, 47, 49, 50, 51, 56, 61, 
	67, 73, 81, 88, 95, 102, 109, 111, 
	113, 115, 119, 123, 125, 127, 131, 137, 
	139, 145, 149, 151, 152, 155, 156, 158, 
	159, 161, 162, 163, 165, 166, 167, 170, 
	171, 172, 173, 174, 176, 178, 179, 182, 
	183, 184, 185, 187, 189, 191, 193, 194, 
	196, 199, 200, 202, 204, 205, 206, 208, 
	209, 210, 212, 213, 214, 216, 218, 220, 
	223, 229, 235, 241, 247, 251, 257, 260, 
	262, 264, 265, 270, 272, 274, 275, 279, 
	280, 284, 285, 286, 290, 291, 292, 297, 
	298, 299, 300, 301, 305, 307, 308, 313, 
	314, 315, 316, 320, 322, 326, 330, 331, 
	333, 338, 339, 343, 347, 348, 349, 353, 
	354, 355, 359, 360, 361, 365, 376, 393, 
	408, 408, 408, 412, 416, 419, 424, 427, 
	428, 434, 441, 447, 456, 468, 474, 481, 
	498, 511, 523, 535, 547, 559, 571, 583, 
	595, 607, 617, 628, 645, 660, 677, 693, 
	709, 725, 741, 757, 773, 789, 805, 819, 
	834, 849, 864, 883, 900, 915, 922, 933, 
	946, 959, 972, 985, 998, 1011, 1024, 1035, 
}

var _trans_keys []byte = []byte{
	48, 57, 48, 57, 48, 57, 48, 57, 
	46, 48, 49, 65, 68, 70, 74, 77, 
	78, 79, 83, 45, 47, 50, 57, 48, 
	49, 65, 68, 70, 74, 77, 78, 79, 
	83, 50, 57, 48, 49, 57, 48, 57, 
	50, 65, 66, 48, 49, 51, 57, 65, 
	66, 68, 67, 50, 48, 49, 51, 57, 
	50, 48, 49, 51, 57, 47, 95, 65, 
	90, 97, 122, 47, 95, 65, 90, 97, 
	122, 47, 68, 77, 95, 65, 90, 97, 
	122, 47, 68, 95, 65, 90, 97, 122, 
	47, 67, 95, 65, 90, 97, 122, 47, 
	77, 95, 65, 90, 97, 122, 47, 95, 
	109, 65, 90, 97, 122, 48, 57, 48, 
	57, 48, 57, 48, 53, 54, 57, 48, 
	53, 54, 57, 48, 57, 48, 57, 45, 
	47, 48, 57, 48, 51, 49, 50, 52, 
	57, 49, 57, 45, 47, 48, 50, 51, 
	57, 45, 47, 48, 57, 112, 117, 114, 
	45, 47, 105, 108, 45, 47, 103, 45, 
	47, 101, 99, 45, 47, 101, 98, 45, 
	47, 114, 117, 97, 114, 121, 45, 47, 
	97, 117, 110, 45, 47, 117, 97, 114, 
	121, 45, 47, 108, 110, 45, 47, 45, 
	47, 97, 114, 121, 45, 47, 99, 104, 
	45, 47, 45, 47, 111, 118, 45, 47, 
	99, 116, 45, 47, 101, 112, 45, 47, 
	48, 57, 48, 57, 48, 49, 57, 48, 
	51, 49, 50, 52, 57, 48, 51, 49, 
	50, 52, 57, 48, 51, 49, 50, 52, 
	57, 48, 51, 49, 50, 52, 57, 48, 
	49, 50, 57, 48, 51, 49, 50, 52, 
	57, 48, 49, 57, 48, 57, 112, 117, 
	114, 48, 51, 105, 49, 50, 48, 57, 
	48, 49, 108, 48, 51, 49, 50, 103, 
	48, 51, 49, 50, 101, 99, 48, 51, 
	49, 50, 101, 98, 48, 51, 114, 49, 
	50, 117, 97, 114, 121, 48, 51, 49, 
	50, 97, 117, 110, 48, 51, 117, 49, 
	50, 97, 114, 121, 48, 51, 49, 50, 
	108, 110, 48, 51, 49, 50, 48, 51, 
	49, 50, 97, 114, 121, 48, 51, 99, 
	49, 50, 104, 48, 51, 49, 50, 48, 
	51, 49, 50, 111, 118, 48, 51, 49, 
	50, 99, 116, 48, 51, 49, 50, 101, 
	112, 48, 51, 49, 50, 32, 43, 45, 
	47, 84, 90, 95, 65, 89, 97, 122, 
	32, 43, 45, 47, 58, 65, 80, 90, 
	95, 97, 112, 48, 57, 66, 89, 98, 
	122, 32, 43, 45, 47, 65, 66, 80, 
	90, 95, 97, 112, 67, 89, 98, 122, 
	32, 58, 48, 57, 32, 58, 48, 57, 
	32, 48, 57, 32, 48, 53, 54, 57, 
	32, 48, 57, 32, 32, 58, 48, 51, 
	52, 57, 32, 47, 95, 65, 90, 97, 
	122, 47, 95, 65, 90, 97, 122, 32, 
	43, 45, 47, 95, 65, 90, 97, 122, 
	32, 43, 45, 47, 65, 66, 90, 95, 
	67, 89, 97, 122, 47, 95, 65, 90, 
	97, 122, 32, 47, 95, 65, 90, 97, 
	122, 32, 43, 45, 47, 58, 65, 80, 
	90, 95, 97, 112, 48, 57, 66, 89, 
	98, 122, 32, 43, 45, 46, 47, 90, 
	95, 48, 57, 65, 89, 97, 122, 32, 
	43, 45, 47, 90, 95, 48, 57, 65, 
	89, 97, 122, 32, 43, 45, 47, 90, 
	95, 48, 57, 65, 89, 97, 122, 32, 
	43, 45, 47, 90, 95, 48, 57, 65, 
	89, 97, 122, 32, 43, 45, 47, 90, 
	95, 48, 57, 65, 89, 97, 122, 32, 
	43, 45, 47, 90, 95, 48, 57, 65, 
	89, 97, 122, 32, 43, 45, 47, 90, 
	95, 48, 57, 65, 89, 97, 122, 32, 
	43, 45, 47, 90, 95, 48, 57, 65, 
	89, 97, 122, 32, 43, 45, 47, 90, 
	95, 48, 57, 65, 89, 97, 122, 32, 
	43, 45, 47, 90, 95, 65, 89, 97, 
	122, 32, 43, 45, 46, 47, 90, 95, 
	65, 89, 97, 122, 32, 43, 45, 47, 
	58, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 58, 65, 80, 90, 95, 97, 112, 
	66, 89, 98, 122, 32, 43, 45, 46, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 48, 
	57, 66, 89, 98, 122, 32, 43, 45, 
	47, 65, 80, 90, 95, 97, 112, 66, 
	89, 98, 122, 32, 43, 45, 46, 47, 
	65, 80, 90, 95, 97, 112, 66, 89, 
	98, 122, 32, 43, 45, 46, 47, 65, 
	80, 90, 95, 97, 112, 66, 89, 98, 
	122, 32, 43, 45, 47, 58, 65, 80, 
	90, 95, 97, 112, 66, 89, 98, 122, 
	32, 43, 45, 47, 58, 65, 80, 90, 
	95, 97, 112, 48, 51, 52, 57, 66, 
	89, 98, 122, 32, 43, 45, 47, 58, 
	65, 80, 90, 95, 97, 112, 48, 57, 
	66, 89, 98, 122, 32, 43, 45, 47, 
	50, 90, 95, 48, 49, 51, 57, 65, 
	89, 97, 122, 32, 47, 95, 65, 90, 
	97, 122, 32, 43, 45, 47, 84, 90, 
	95, 65, 89, 97, 122, 32, 43, 45, 
	47, 84, 90, 95, 48, 57, 65, 89, 
	97, 122, 32, 43, 45, 47, 84, 90, 
	95, 48, 49, 65, 89, 97, 122, 32, 
	43, 45, 47, 84, 90, 95, 49, 57, 
	65, 89, 97, 122, 32, 43, 45, 47, 
	84, 90, 95, 48, 57, 65, 89, 97, 
	122, 32, 43, 45, 47, 84, 90, 95, 
	48, 49, 65, 89, 97, 122, 32, 43, 
	45, 47, 84, 90, 95, 48, 57, 65, 
	89, 97, 122, 32, 43, 45, 47, 84, 
	90, 95, 48, 49, 65, 89, 97, 122, 
	32, 43, 45, 47, 84, 90, 95, 65, 
	89, 97, 122, 32, 43, 45, 47, 84, 
	90, 95, 49, 57, 65, 89, 97, 122, 
	
}

var _single_lengths []byte = []byte{
	0, 0, 0, 0, 0, 11, 10, 1, 
	0, 3, 2, 1, 1, 1, 1, 2, 
	2, 4, 3, 3, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 0, 
	2, 2, 2, 1, 3, 1, 2, 1, 
	2, 1, 1, 2, 1, 1, 3, 1, 
	1, 1, 1, 2, 2, 1, 3, 1, 
	1, 1, 2, 2, 2, 2, 1, 2, 
	3, 1, 2, 2, 1, 1, 2, 1, 
	1, 2, 1, 1, 2, 0, 0, 1, 
	2, 2, 2, 2, 0, 2, 1, 0, 
	2, 1, 3, 0, 0, 1, 2, 1, 
	2, 1, 1, 2, 1, 1, 3, 1, 
	1, 1, 1, 2, 2, 1, 3, 1, 
	1, 1, 2, 2, 2, 2, 1, 2, 
	3, 1, 2, 2, 1, 1, 2, 1, 
	1, 2, 1, 1, 2, 7, 11, 11, 
	0, 0, 2, 2, 1, 1, 1, 1, 
	2, 3, 2, 5, 8, 2, 3, 11, 
	7, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 7, 11, 11, 11, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 11, 
	11, 11, 11, 11, 7, 3, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
}

var _range_lengths []byte = []byte{
	0, 1, 1, 1, 1, 2, 1, 1, 
	1, 2, 0, 0, 0, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 2, 2, 1, 1, 1, 2, 1, 
	2, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 0, 1, 1, 1, 0, 1, 0, 
	1, 0, 0, 1, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 1, 0, 
	0, 0, 1, 0, 1, 1, 0, 0, 
	1, 0, 1, 1, 0, 0, 1, 0, 
	0, 1, 0, 0, 1, 2, 3, 2, 
	0, 0, 1, 1, 1, 2, 1, 0, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 2, 2, 3, 2, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 2, 2, 
	2, 2, 4, 3, 4, 2, 2, 3, 
	3, 3, 3, 3, 3, 3, 2, 3, 
}

var _index_offsets []int16 = []int16{
	0, 0, 2, 4, 6, 8, 22, 34, 
	37, 39, 45, 48, 50, 52, 56, 60, 
	65, 70, 77, 83, 89, 95, 101, 103, 
	105, 107, 110, 113, 115, 117, 121, 126, 
	128, 133, 137, 140, 142, 146, 148, 151, 
	153, 156, 158, 160, 163, 165, 167, 171, 
	173, 175, 177, 179, 182, 185, 187, 191, 
	193, 195, 197, 200, 203, 206, 209, 211, 
	214, 218, 220, 223, 226, 228, 230, 233, 
	235, 237, 240, 242, 244, 247, 249, 251, 
	254, 259, 264, 269, 274, 277, 282, 285, 
	287, 290, 292, 297, 299, 301, 303, 307, 
	309, 313, 315, 317, 321, 323, 325, 330, 
	332, 334, 336, 338, 342, 345, 347, 352, 
	354, 356, 358, 362, 365, 369, 373, 375, 
	378, 383, 385, 389, 393, 395, 397, 401, 
	403, 405, 409, 411, 413, 417, 427, 442, 
	456, 457, 458, 462, 466, 469, 473, 476, 
	478, 483, 489, 494, 502, 513, 518, 524, 
	539, 550, 560, 570, 580, 590, 600, 610, 
	620, 630, 639, 649, 664, 678, 693, 707, 
	721, 735, 749, 763, 777, 791, 805, 818, 
	832, 846, 860, 876, 891, 903, 909, 919, 
	930, 941, 952, 963, 974, 985, 996, 1006, 
}

var _trans_targs []byte = []byte{
	2, 0, 3, 0, 4, 0, 5, 0, 
	77, 79, 81, 88, 97, 100, 108, 118, 
	124, 127, 130, 6, 85, 0, 7, 32, 
	34, 41, 44, 52, 62, 68, 71, 74, 
	33, 0, 8, 29, 0, 133, 0, 178, 
	11, 12, 134, 179, 0, 11, 12, 0, 
	136, 0, 137, 0, 144, 138, 139, 0, 
	144, 138, 139, 0, 16, 16, 16, 16, 
	0, 145, 145, 145, 145, 0, 16, 146, 
	147, 16, 16, 16, 0, 16, 146, 16, 
	16, 16, 0, 16, 149, 16, 16, 16, 
	0, 16, 147, 16, 16, 16, 0, 16, 
	16, 147, 16, 16, 0, 152, 0, 153, 
	0, 162, 0, 163, 177, 0, 165, 176, 
	0, 166, 0, 22, 0, 30, 30, 133, 
	0, 31, 184, 183, 182, 0, 182, 0, 
	30, 30, 29, 8, 0, 30, 30, 8, 
	0, 35, 39, 0, 36, 0, 30, 30, 
	37, 0, 38, 0, 30, 30, 0, 40, 
	0, 30, 30, 0, 42, 0, 43, 0, 
	30, 30, 0, 45, 0, 46, 0, 30, 
	30, 47, 0, 48, 0, 49, 0, 50, 
	0, 51, 0, 30, 30, 0, 53, 59, 
	0, 54, 0, 30, 30, 55, 0, 56, 
	0, 57, 0, 58, 0, 30, 30, 0, 
	60, 61, 0, 30, 30, 0, 30, 30, 
	0, 63, 0, 64, 67, 0, 30, 30, 
	65, 0, 66, 0, 30, 30, 0, 30, 
	30, 0, 69, 0, 70, 0, 30, 30, 
	0, 72, 0, 73, 0, 30, 30, 0, 
	75, 0, 76, 0, 30, 30, 0, 78, 
	0, 8, 0, 8, 80, 0, 185, 187, 
	186, 133, 0, 82, 84, 83, 8, 0, 
	185, 189, 188, 190, 0, 191, 189, 188, 
	190, 0, 190, 133, 0, 86, 84, 87, 
	8, 0, 133, 190, 0, 190, 0, 89, 
	95, 0, 90, 0, 31, 92, 93, 91, 
	0, 182, 0, 182, 0, 94, 0, 31, 
	92, 91, 0, 96, 0, 31, 92, 91, 
	0, 98, 0, 99, 0, 31, 92, 91, 
	0, 101, 0, 102, 0, 31, 92, 103, 
	91, 0, 104, 0, 105, 0, 106, 0, 
	107, 0, 31, 92, 91, 0, 109, 115, 
	0, 110, 0, 31, 92, 111, 91, 0, 
	112, 0, 113, 0, 114, 0, 31, 92, 
	91, 0, 116, 117, 0, 31, 92, 91, 
	0, 31, 92, 91, 0, 119, 0, 120, 
	123, 0, 31, 92, 121, 91, 0, 122, 
	0, 31, 92, 91, 0, 31, 92, 91, 
	0, 125, 0, 126, 0, 31, 92, 91, 
	0, 128, 0, 129, 0, 31, 92, 91, 
	0, 131, 0, 132, 0, 31, 92, 91, 
	0, 9, 13, 14, 15, 180, 150, 15, 
	15, 15, 0, 135, 13, 14, 15, 25, 
	20, 20, 150, 15, 21, 21, 151, 15, 
	15, 0, 10, 13, 14, 15, 17, 19, 
	20, 150, 15, 21, 21, 15, 15, 0, 
	0, 0, 10, 141, 139, 0, 10, 141, 
	140, 0, 10, 140, 0, 10, 142, 143, 
	0, 10, 143, 0, 10, 0, 10, 141, 
	139, 140, 0, 10, 145, 145, 145, 145, 
	0, 145, 145, 145, 145, 0, 148, 13, 
	14, 145, 145, 145, 145, 0, 10, 13, 
	14, 15, 18, 19, 150, 15, 15, 15, 
	0, 145, 145, 145, 145, 0, 10, 16, 
	16, 16, 16, 0, 135, 13, 14, 15, 
	25, 20, 20, 150, 15, 21, 21, 22, 
	15, 15, 0, 148, 13, 14, 23, 15, 
	150, 15, 24, 15, 15, 0, 148, 13, 
	14, 15, 150, 15, 154, 15, 15, 0, 
	148, 13, 14, 15, 150, 15, 155, 15, 
	15, 0, 148, 13, 14, 15, 150, 15, 
	156, 15, 15, 0, 148, 13, 14, 15, 
	150, 15, 157, 15, 15, 0, 148, 13, 
	14, 15, 150, 15, 158, 15, 15, 0, 
	148, 13, 14, 15, 150, 15, 159, 15, 
	15, 0, 148, 13, 14, 15, 150, 15, 
	160, 15, 15, 0, 148, 13, 14, 15, 
	150, 15, 161, 15, 15, 0, 148, 13, 
	14, 15, 150, 15, 15, 15, 0, 148, 
	13, 14, 23, 15, 150, 15, 15, 15, 
	0, 135, 13, 14, 15, 26, 20, 20, 
	150, 15, 21, 21, 164, 15, 15, 0, 
	135, 13, 14, 15, 26, 20, 20, 150, 
	15, 21, 21, 15, 15, 0, 135, 13, 
	14, 27, 15, 20, 20, 150, 15, 21, 
	21, 175, 15, 15, 0, 135, 13, 14, 
	15, 20, 20, 150, 15, 21, 21, 167, 
	15, 15, 0, 135, 13, 14, 15, 20, 
	20, 150, 15, 21, 21, 168, 15, 15, 
	0, 135, 13, 14, 15, 20, 20, 150, 
	15, 21, 21, 169, 15, 15, 0, 135, 
	13, 14, 15, 20, 20, 150, 15, 21, 
	21, 170, 15, 15, 0, 135, 13, 14, 
	15, 20, 20, 150, 15, 21, 21, 171, 
	15, 15, 0, 135, 13, 14, 15, 20, 
	20, 150, 15, 21, 21, 172, 15, 15, 
	0, 135, 13, 14, 15, 20, 20, 150, 
	15, 21, 21, 173, 15, 15, 0, 135, 
	13, 14, 15, 20, 20, 150, 15, 21, 
	21, 174, 15, 15, 0, 135, 13, 14, 
	15, 20, 20, 150, 15, 21, 21, 15, 
	15, 0, 135, 13, 14, 27, 15, 20, 
	20, 150, 15, 21, 21, 15, 15, 0, 
	135, 13, 14, 27, 15, 20, 20, 150, 
	15, 21, 21, 15, 15, 0, 135, 13, 
	14, 15, 26, 20, 20, 150, 15, 21, 
	21, 15, 15, 0, 135, 13, 14, 15, 
	25, 20, 20, 150, 15, 21, 21, 151, 
	28, 15, 15, 0, 135, 13, 14, 15, 
	25, 20, 20, 150, 15, 21, 21, 28, 
	15, 15, 0, 10, 13, 14, 16, 178, 
	181, 16, 134, 179, 16, 16, 0, 10, 
	145, 145, 145, 145, 0, 9, 13, 14, 
	15, 180, 150, 15, 15, 15, 0, 9, 
	13, 14, 15, 180, 150, 15, 182, 15, 
	15, 0, 9, 13, 14, 15, 180, 150, 
	15, 182, 15, 15, 0, 9, 13, 14, 
	15, 180, 150, 15, 182, 15, 15, 0, 
	9, 13, 14, 15, 180, 150, 15, 182, 
	15, 15, 0, 9, 13, 14, 15, 180, 
	150, 15, 182, 15, 15, 0, 9, 13, 
	14, 15, 180, 150, 15, 182, 15, 15, 
	0, 9, 13, 14, 15, 180, 150, 15, 
	182, 15, 15, 0, 9, 13, 14, 15, 
	180, 150, 15, 15, 15, 0, 9, 13, 
	14, 15, 180, 150, 15, 182, 15, 15, 
	0, 
}

var _trans_actions []byte = []byte{
	3, 1, 0, 1, 0, 1, 0, 1, 
	9, 64, 64, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 64, 1, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 1, 0, 0, 1, 0, 1, 3, 
	0, 0, 3, 3, 1, 0, 0, 1, 
	0, 1, 0, 1, 3, 3, 3, 1, 
	139, 139, 139, 1, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 1, 0, 1, 3, 
	1, 0, 1, 3, 3, 1, 3, 3, 
	1, 3, 1, 0, 1, 7, 7, 0, 
	1, 3, 3, 3, 3, 1, 0, 1, 
	7, 7, 0, 0, 1, 7, 7, 0, 
	1, 0, 0, 1, 0, 1, 25, 25, 
	0, 1, 0, 1, 25, 25, 1, 0, 
	1, 33, 33, 1, 0, 1, 0, 1, 
	41, 41, 1, 0, 1, 0, 1, 21, 
	21, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 21, 21, 1, 0, 0, 
	1, 0, 1, 19, 19, 0, 1, 0, 
	1, 0, 1, 0, 1, 19, 19, 1, 
	0, 0, 1, 31, 31, 1, 29, 29, 
	1, 0, 1, 0, 0, 1, 23, 23, 
	0, 1, 0, 1, 23, 23, 1, 27, 
	27, 1, 0, 1, 0, 1, 39, 39, 
	1, 0, 1, 0, 1, 37, 37, 1, 
	0, 1, 0, 1, 35, 35, 1, 3, 
	1, 0, 1, 0, 0, 1, 61, 61, 
	61, 0, 1, 61, 61, 61, 0, 1, 
	61, 61, 61, 0, 1, 61, 61, 61, 
	0, 1, 0, 0, 1, 61, 61, 61, 
	0, 1, 0, 0, 1, 0, 1, 0, 
	0, 1, 0, 1, 88, 88, 0, 88, 
	1, 0, 1, 0, 1, 0, 1, 88, 
	88, 88, 1, 0, 1, 100, 100, 100, 
	1, 0, 1, 0, 1, 112, 112, 112, 
	1, 0, 1, 0, 1, 82, 82, 0, 
	82, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 82, 82, 82, 1, 0, 0, 
	1, 0, 1, 79, 79, 0, 79, 1, 
	0, 1, 0, 1, 0, 1, 79, 79, 
	79, 1, 0, 0, 1, 97, 97, 97, 
	1, 94, 94, 94, 1, 0, 1, 0, 
	0, 1, 85, 85, 0, 85, 1, 0, 
	1, 85, 85, 85, 1, 91, 91, 91, 
	1, 0, 1, 0, 1, 109, 109, 109, 
	1, 0, 1, 0, 1, 106, 106, 106, 
	1, 0, 1, 0, 1, 103, 103, 103, 
	1, 11, 11, 11, 67, 67, 67, 67, 
	67, 67, 0, 47, 47, 47, 121, 47, 
	121, 121, 121, 121, 121, 121, 0, 121, 
	121, 0, 0, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	0, 0, 145, 59, 0, 0, 145, 59, 
	0, 0, 145, 0, 0, 5, 3, 3, 
	0, 142, 0, 0, 142, 0, 145, 59, 
	0, 0, 0, 148, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 17, 
	17, 76, 76, 76, 76, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 45, 45, 45, 118, 
	45, 118, 118, 118, 118, 118, 118, 0, 
	118, 118, 0, 13, 13, 13, 13, 73, 
	73, 73, 0, 73, 73, 0, 57, 57, 
	57, 136, 136, 136, 0, 136, 136, 0, 
	57, 57, 57, 136, 136, 136, 0, 136, 
	136, 0, 57, 57, 57, 136, 136, 136, 
	0, 136, 136, 0, 57, 57, 57, 136, 
	136, 136, 0, 136, 136, 0, 57, 57, 
	57, 136, 136, 136, 0, 136, 136, 0, 
	57, 57, 57, 136, 136, 136, 0, 136, 
	136, 0, 57, 57, 57, 136, 136, 136, 
	0, 136, 136, 0, 57, 57, 57, 136, 
	136, 136, 0, 136, 136, 0, 57, 57, 
	57, 136, 136, 136, 136, 136, 0, 13, 
	13, 13, 13, 73, 73, 73, 73, 73, 
	0, 51, 51, 51, 127, 51, 127, 127, 
	127, 127, 127, 127, 0, 127, 127, 0, 
	49, 49, 49, 124, 49, 124, 124, 124, 
	124, 124, 124, 124, 124, 0, 55, 55, 
	55, 55, 133, 133, 133, 133, 133, 133, 
	133, 0, 133, 133, 0, 57, 57, 57, 
	136, 136, 136, 136, 136, 136, 136, 0, 
	136, 136, 0, 57, 57, 57, 136, 136, 
	136, 136, 136, 136, 136, 0, 136, 136, 
	0, 57, 57, 57, 136, 136, 136, 136, 
	136, 136, 136, 0, 136, 136, 0, 57, 
	57, 57, 136, 136, 136, 136, 136, 136, 
	136, 0, 136, 136, 0, 57, 57, 57, 
	136, 136, 136, 136, 136, 136, 136, 0, 
	136, 136, 0, 57, 57, 57, 136, 136, 
	136, 136, 136, 136, 136, 0, 136, 136, 
	0, 57, 57, 57, 136, 136, 136, 136, 
	136, 136, 136, 0, 136, 136, 0, 57, 
	57, 57, 136, 136, 136, 136, 136, 136, 
	136, 0, 136, 136, 0, 57, 57, 57, 
	136, 136, 136, 136, 136, 136, 136, 136, 
	136, 0, 53, 53, 53, 53, 130, 130, 
	130, 130, 130, 130, 130, 130, 130, 0, 
	55, 55, 55, 55, 133, 133, 133, 133, 
	133, 133, 133, 133, 133, 0, 51, 51, 
	51, 127, 51, 127, 127, 127, 127, 127, 
	127, 127, 127, 0, 47, 47, 47, 121, 
	47, 121, 121, 121, 121, 121, 121, 0, 
	0, 121, 121, 0, 47, 47, 47, 121, 
	47, 121, 121, 121, 121, 121, 121, 0, 
	121, 121, 0, 0, 0, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 0, 5, 
	0, 0, 0, 0, 0, 43, 43, 43, 
	115, 115, 115, 115, 115, 115, 0, 43, 
	43, 43, 115, 115, 115, 115, 0, 115, 
	115, 0, 43, 43, 43, 115, 115, 115, 
	115, 0, 115, 115, 0, 11, 11, 11, 
	67, 67, 67, 67, 0, 67, 67, 0, 
	11, 11, 11, 67, 67, 67, 67, 0, 
	67, 67, 0, 11, 11, 11, 67, 67, 
	67, 67, 0, 67, 67, 0, 70, 70, 
	70, 151, 151, 151, 151, 0, 151, 151, 
	0, 70, 70, 70, 151, 151, 151, 151, 
	0, 151, 151, 0, 70, 70, 70, 151, 
	151, 151, 151, 151, 151, 0, 70, 70, 
	70, 151, 151, 151, 151, 0, 151, 151, 
	0, 
}

var _eof_actions []byte = []byte{
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 11, 47, 0, 
	0, 15, 145, 145, 145, 5, 142, 142, 
	145, 148, 0, 17, 0, 15, 5, 45, 
	13, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 13, 51, 49, 55, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 53, 
	55, 51, 47, 47, 0, 5, 43, 43, 
	43, 11, 11, 11, 70, 70, 70, 70, 
}

const start int = 1

const en_main int = 1


//line ragel/parse_datetime.go.rl:27

func Parse(data string) (st Datetime, err error) {
    cs, p, pe := 0, 0, len(data)
    eof := pe
    pb := p

    
//line ragel/parse_datetime.go:1156
	{
	cs = start
	}

//line ragel/parse_datetime.go.rl:34
    
//line ragel/parse_datetime.go:1163
	{
	var _klen int
	var _trans int
	var _acts int
	var _nacts uint
	var _keys int
	if p == pe {
		goto _test_eof
	}
	if cs == 0 {
		goto _out
	}
_resume:
	_keys = int(_key_offsets[cs])
	_trans = int(_index_offsets[cs])

	_klen = int(_single_lengths[cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case data[p] < _trans_keys[_mid]:
				_upper = _mid - 1
			case data[p] > _trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_range_lengths[cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case data[p] < _trans_keys[_mid]:
				_upper = _mid - 2
			case data[p] > _trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
	cs = int(_trans_targs[_trans])

	if _trans_actions[_trans] == 0 {
		goto _again
	}

	_acts = int(_trans_actions[_trans])
	_nacts = uint(_actions[_acts]); _acts++
	for ; _nacts > 0; _nacts-- {
		_acts++
		switch _actions[_acts-1] {
		case 0:
//line ragel/datetime.rl:5
 return st, err 
		case 1:
//line ragel/datetime.rl:7
 pb = p 
		case 2:
//line ragel/datetime.rl:9
 st.Zoned = true 
		case 3:
//line ragel/datetime.rl:11

    st.Month, _ = strconv.Atoi(data[pb:p])

		case 4:
//line ragel/datetime.rl:15

    st.Year, _ = strconv.Atoi(data[pb:pb+4])

		case 5:
//line ragel/datetime.rl:19

    st.Day_of_year, _ = strconv.Atoi(data[pb:pb+3])

		case 6:
//line ragel/datetime.rl:29

    len := p - pb
    switch len {
        case 4: 
            st.Hour, _ = strconv.Atoi(data[pb:pb+2])
            st.Minute, _ = strconv.Atoi(data[pb+2:pb+4])
        case 6:
            st.Hour, _ = strconv.Atoi(data[pb:pb+2])
            st.Minute, _ = strconv.Atoi(data[pb+2:pb+4])
            st.Second, _ = strconv.Atoi(data[pb+4:pb+6])
        default:
            err = errors.New("invalid hhmmss digits")
            return
    }

		case 8:
//line ragel/datetime.rl:49

    apm, err := parse_ampm(data[pb:]);
    if err != nil {
        return st, err
    }
    if st.Hour > 12 {
        err = errors.New("hour out of range")
        return st, err
    }
    switch apm {
        case AMPM_AM:
            if (st.Hour == 12) {
                st.Hour -= 12; // 12:00:00 am == 00:00:00
            }
        case AMPM_PM: {
            if (st.Hour < 12) {
                st.Hour += 12;
            }
            // else {} // 12:00:00 pm = 12:00:00, do nothing
        }
    }

		case 9:
//line ragel/datetime.rl:72
 st.Month = 1 ;
		case 10:
//line ragel/datetime.rl:73
 st.Month = 2 ;
		case 11:
//line ragel/datetime.rl:74
 st.Month = 3 ;
		case 12:
//line ragel/datetime.rl:75
 st.Month = 4 ;
		case 13:
//line ragel/datetime.rl:76
 st.Month = 5 ;
		case 14:
//line ragel/datetime.rl:77
 st.Month = 6 ;
		case 15:
//line ragel/datetime.rl:78
 st.Month = 7 ;
		case 16:
//line ragel/datetime.rl:79
 st.Month = 8 ;
		case 17:
//line ragel/datetime.rl:80
 st.Month = 9 ;
		case 18:
//line ragel/datetime.rl:81
 st.Month = 10 ;
		case 19:
//line ragel/datetime.rl:82
 st.Month = 11 ;
		case 20:
//line ragel/datetime.rl:83
 st.Month = 12 ;
		case 21:
//line ragel/datetime.rl:85

    len := p - pb
    switch len {
        case 1: st.Day, _ = strconv.Atoi(data[pb:pb+1])
        case 2: st.Day, _ = strconv.Atoi(data[pb:pb+2])
        default:
            err = fmt.Errorf("invalid day digits %s", data[pb:pb+len])
            return
    }

		case 22:
//line ragel/datetime.rl:96

    st.Hour, _ = strconv.Atoi(data[pb:pb+2])

		case 23:
//line ragel/datetime.rl:99

    st.Hour, _ = strconv.Atoi(data[pb:pb+1])

		case 24:
//line ragel/datetime.rl:102

    st.Minute, _ = strconv.Atoi(data[pb:pb+2])

		case 25:
//line ragel/datetime.rl:105

    st.Minute, _ = strconv.Atoi(data[pb:pb+1])

		case 26:
//line ragel/datetime.rl:108

    st.Second, _ = strconv.Atoi(data[pb:pb+2])

		case 27:
//line ragel/datetime.rl:111

    st.Second, _ = strconv.Atoi(data[pb:pb+1])

		case 28:
//line ragel/datetime.rl:114

    len := p - pb
    switch len {
        case 1: st.Millisecond = parse_digits(data[pb:pb+1]) * 100
        case 2: st.Millisecond = parse_digits(data[pb:pb+2])  * 10
        case 3: st.Millisecond = parse_digits(data[pb:pb+3]) 
        case 4: 
            st.Millisecond = parse_digits(data[pb:pb+3]) 
            st.Microsecond = parse_digits(data[pb+3:pb+4])  * 100
        case 5: 
            st.Millisecond = parse_digits(data[pb:pb+3]) 
            st.Microsecond = parse_digits(data[pb+3:pb+5]) * 10
        default: 
            st.Millisecond = parse_digits(data[pb:pb+3]) 
            st.Microsecond = parse_digits(data[pb+3:pb+6]) 
    }

		case 29:
//line ragel/datetime.rl:132
 st.Negative_offset = true 
		case 30:
//line ragel/datetime.rl:134

    len := p - pb
    switch len {
        case 1: st.Offset_hour, _ = strconv.Atoi(data[pb:pb+1])
        case 2: st.Offset_hour, _ = strconv.Atoi(data[pb:pb+2])
        default:
            err = errors.New("invalid offset hour")
            return
    }

		case 31:
//line ragel/datetime.rl:145

    len := p - pb
    switch len {
        case 1: st.Offset_minute, _ = strconv.Atoi(data[pb:pb+1])
        case 2: st.Offset_minute, _ = strconv.Atoi(data[pb:pb+2])
        default:
            err = errors.New("invalid offset minute")
            return
    }

		case 32:
//line ragel/datetime.rl:156
 
    // 1 as 1 hour
    // 12 as 12 hours
    // 123 as 1 hour 23 minutes
    // 1234 as 12 hours and 34 minutes
    // 如果超过4位则移除前缀0直到保留后4位；移除前缀0后如果还超过4位则溢出报错
    // - 00000012 as 12 minutes
    // - 0000001234 as 12 hours and 34 minutes
    len := p - pb
    for len > 4 &&  data[pb] =='0' { 
        len -= 1
        pb += 1 
    }
    switch(len){
        case 1:{st.Offset_hour, _ = strconv.Atoi(data[pb:pb+1])}
        case 2:{st.Offset_hour, _ = strconv.Atoi(data[pb:pb+2])}
        case 3:{ 
            num , _ := strconv.Atoi(data[pb:pb+3])
            st.Offset_hour = num/100
            st.Offset_minute = num%100
            if st.Offset_minute >=60 {
                err = errors.New("invalid offset digits")
                return
            } 
        }
        case 4:{ 
            num := parse_digits(data[pb:pb+4])
            st.Offset_hour = num/100
            st.Offset_minute = num%100
            if st.Offset_minute >=60 || st.Offset_hour>=15 {
                err = errors.New("invalid offset digits")
                return
            } 
        }
        default: 
            err = errors.New("invalid offset digits")
            return
    }

		case 33:
//line ragel/datetime.rl:196

    len := p - pb;
    zone_name_or_abbrev := data[pb:pb+len]
    _, err = time.LoadLocation(zone_name_or_abbrev)
    if err != nil {
        return
    }
    st.Zone_name_or_abbrev = zone_name_or_abbrev
    st.Zoned = true

//line ragel/parse_datetime.go:1483
		}
	}

_again:
	if cs == 0 {
		goto _out
	}
	p++
	if p != pe {
		goto _resume
	}
	_test_eof: {}
	if p == eof {
		__acts := _eof_actions[cs]
		__nacts := uint(_actions[__acts]); __acts++
		for ; __nacts > 0; __nacts-- {
			__acts++
			switch _actions[__acts-1] {
			case 0:
//line ragel/datetime.rl:5
 return st, err 
			case 2:
//line ragel/datetime.rl:9
 st.Zoned = true 
			case 5:
//line ragel/datetime.rl:19

    st.Day_of_year, _ = strconv.Atoi(data[pb:pb+3])

			case 6:
//line ragel/datetime.rl:29

    len := p - pb
    switch len {
        case 4: 
            st.Hour, _ = strconv.Atoi(data[pb:pb+2])
            st.Minute, _ = strconv.Atoi(data[pb+2:pb+4])
        case 6:
            st.Hour, _ = strconv.Atoi(data[pb:pb+2])
            st.Minute, _ = strconv.Atoi(data[pb+2:pb+4])
            st.Second, _ = strconv.Atoi(data[pb+4:pb+6])
        default:
            err = errors.New("invalid hhmmss digits")
            return
    }

			case 7:
//line ragel/datetime.rl:45

    st.Ad_bc = ADBC_BC;

			case 8:
//line ragel/datetime.rl:49

    apm, err := parse_ampm(data[pb:]);
    if err != nil {
        return st, err
    }
    if st.Hour > 12 {
        err = errors.New("hour out of range")
        return st, err
    }
    switch apm {
        case AMPM_AM:
            if (st.Hour == 12) {
                st.Hour -= 12; // 12:00:00 am == 00:00:00
            }
        case AMPM_PM: {
            if (st.Hour < 12) {
                st.Hour += 12;
            }
            // else {} // 12:00:00 pm = 12:00:00, do nothing
        }
    }

			case 21:
//line ragel/datetime.rl:85

    len := p - pb
    switch len {
        case 1: st.Day, _ = strconv.Atoi(data[pb:pb+1])
        case 2: st.Day, _ = strconv.Atoi(data[pb:pb+2])
        default:
            err = fmt.Errorf("invalid day digits %s", data[pb:pb+len])
            return
    }

			case 22:
//line ragel/datetime.rl:96

    st.Hour, _ = strconv.Atoi(data[pb:pb+2])

			case 23:
//line ragel/datetime.rl:99

    st.Hour, _ = strconv.Atoi(data[pb:pb+1])

			case 24:
//line ragel/datetime.rl:102

    st.Minute, _ = strconv.Atoi(data[pb:pb+2])

			case 25:
//line ragel/datetime.rl:105

    st.Minute, _ = strconv.Atoi(data[pb:pb+1])

			case 26:
//line ragel/datetime.rl:108

    st.Second, _ = strconv.Atoi(data[pb:pb+2])

			case 27:
//line ragel/datetime.rl:111

    st.Second, _ = strconv.Atoi(data[pb:pb+1])

			case 28:
//line ragel/datetime.rl:114

    len := p - pb
    switch len {
        case 1: st.Millisecond = parse_digits(data[pb:pb+1]) * 100
        case 2: st.Millisecond = parse_digits(data[pb:pb+2])  * 10
        case 3: st.Millisecond = parse_digits(data[pb:pb+3]) 
        case 4: 
            st.Millisecond = parse_digits(data[pb:pb+3]) 
            st.Microsecond = parse_digits(data[pb+3:pb+4])  * 100
        case 5: 
            st.Millisecond = parse_digits(data[pb:pb+3]) 
            st.Microsecond = parse_digits(data[pb+3:pb+5]) * 10
        default: 
            st.Millisecond = parse_digits(data[pb:pb+3]) 
            st.Microsecond = parse_digits(data[pb+3:pb+6]) 
    }

			case 31:
//line ragel/datetime.rl:145

    len := p - pb
    switch len {
        case 1: st.Offset_minute, _ = strconv.Atoi(data[pb:pb+1])
        case 2: st.Offset_minute, _ = strconv.Atoi(data[pb:pb+2])
        default:
            err = errors.New("invalid offset minute")
            return
    }

			case 32:
//line ragel/datetime.rl:156
 
    // 1 as 1 hour
    // 12 as 12 hours
    // 123 as 1 hour 23 minutes
    // 1234 as 12 hours and 34 minutes
    // 如果超过4位则移除前缀0直到保留后4位；移除前缀0后如果还超过4位则溢出报错
    // - 00000012 as 12 minutes
    // - 0000001234 as 12 hours and 34 minutes
    len := p - pb
    for len > 4 &&  data[pb] =='0' { 
        len -= 1
        pb += 1 
    }
    switch(len){
        case 1:{st.Offset_hour, _ = strconv.Atoi(data[pb:pb+1])}
        case 2:{st.Offset_hour, _ = strconv.Atoi(data[pb:pb+2])}
        case 3:{ 
            num , _ := strconv.Atoi(data[pb:pb+3])
            st.Offset_hour = num/100
            st.Offset_minute = num%100
            if st.Offset_minute >=60 {
                err = errors.New("invalid offset digits")
                return
            } 
        }
        case 4:{ 
            num := parse_digits(data[pb:pb+4])
            st.Offset_hour = num/100
            st.Offset_minute = num%100
            if st.Offset_minute >=60 || st.Offset_hour>=15 {
                err = errors.New("invalid offset digits")
                return
            } 
        }
        default: 
            err = errors.New("invalid offset digits")
            return
    }

			case 33:
//line ragel/datetime.rl:196

    len := p - pb;
    zone_name_or_abbrev := data[pb:pb+len]
    _, err = time.LoadLocation(zone_name_or_abbrev)
    if err != nil {
        return
    }
    st.Zone_name_or_abbrev = zone_name_or_abbrev
    st.Zoned = true

//line ragel/parse_datetime.go:1685
			}
		}
	}

	_out: {}
	}

//line ragel/parse_datetime.go.rl:35

    if p != eof {  // input date not fully consumed
        err = errors.New("input data not fully consumed");
        return
    }

    if cs < atoi_first_final {
        err = fmt.Errorf("time parse error: %s", data)
    }
    return
}

